/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 -t -p 5 gameboy.glb
*/

import { DoubleSide, Group, Mesh, MeshBasicMaterial, Texture } from "three";
import { useCursor, useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useControls } from "leva";
import model from "experiment-assets/retro-gaming/gameboy.glb?url";
import gameboy_ao_map from "experiment-assets/retro-gaming/gb_AO.jpg?url";
import { animated as a } from "@react-spring/three";
import { Screen } from "./Screen";
import { useStore } from "../../store";
import { Buttons } from "./Buttons";
import { ForwardedRef, forwardRef, useEffect, useRef, useState } from "react";
import { MeshType } from "../../utils/types";
import { Cartridges } from "../Cartridges";

export type GameboyGLTFResult = GLTF & {
  nodes: {
    shell: Mesh;
    screen_border: Mesh;
    screen: Mesh;
    dpad: Mesh;
    a: Mesh;
    b: Mesh;
    select: Mesh;
    start: Mesh;
    menu: Mesh;
  };
};

export const Gameboy = forwardRef(
  (props: JSX.IntrinsicElements["group"], ref: ForwardedRef<Group>) => {
    const shellRef = useRef<MeshType<MeshBasicMaterial>>(null);
    const bezelRef = useRef<MeshType<MeshBasicMaterial>>(null);
    const defaultColors = useStore((s) => s.colors);
    const uiContext = useStore((s) => s.uiContext);
    const resumeGame = useStore((s) => s.resumeGame);
    const [hovered, setHovered] = useState(false);
    const gb_ao_tex = useTexture(gameboy_ao_map, (t) => {
      if (t instanceof Texture) {
        t.flipY = false;
      }
    });
    // const [gb_normal_tex] = useTexture([gameboy_normal_map], (ts) => {
    //   for (const t of ts as Texture[]) {
    //     t.flipY = false;
    //     // t.repeat.set(2, 2);
    //   }
    // });

    useCursor(hovered && uiContext === "paused");

    const { screen_bezel_color, color } = useControls(
      "gameboy",
      {
        color: defaultColors.shell,
        button_color: defaultColors.buttons,
        screen_bezel_color: defaultColors.bezel,
      },
      { collapsed: true },
    );

    useEffect(() => {
      useStore.subscribe(
        (state) => state.colors,
        (colors) => {
          shellRef.current?.material.color.setStyle(colors.shell);
          bezelRef.current?.material.color.setStyle(colors.bezel);
        },
      );
    }, []);

    const { nodes } = useGLTF(model) as GameboyGLTFResult;

    return (
      <group {...props} dispose={null}>
        <group position={[-0.01301, -0.03815, -0.00326]}>
          <a.mesh
            ref={shellRef}
            renderOrder={1}
            castShadow
            geometry={nodes.shell.geometry}
            onPointerOver={() => setHovered(true)}
            onPointerOut={() => setHovered(false)}
            onClick={async () => {
              if (uiContext === "paused") {
                await resumeGame();
              }
            }}
          >
            <meshStandardMaterial
              color={color}
              aoMap={gb_ao_tex}
              side={DoubleSide}
              roughness={0.1}
              // normalMap={gb_normal_tex}
            />
          </a.mesh>
        </group>
        <a.mesh
          ref={bezelRef}
          geometry={nodes.screen_border.geometry}
          position={[-0.01265, 0.02662, -0.17457]}
        >
          <meshStandardMaterial
            color={screen_bezel_color}
            aoMap={gb_ao_tex}
            roughness={0.2}
            metalness={1}
          />
        </a.mesh>

        <group ref={ref} position={[-0.01259, 0.02811, -0.23333]}>
          <Screen />
        </group>

        <Buttons nodes={nodes} />

        <Cartridges />
      </group>
    );
  },
);

Gameboy.displayName = "Gameboy";

useGLTF.preload(model);
