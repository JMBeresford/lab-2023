/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 -t -p 5 gameboy.glb
*/

import { Mesh, MeshBasicMaterial, Texture } from "three";
import { useCursor, useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useControls } from "leva";
import model from "experiment-assets/retro-gaming/gameboy.glb?url";
import gameboy_ao_map from "experiment-assets/retro-gaming/gb_AO.jpg?url";
import { animated as a } from "@react-spring/three";
import { Screen } from "./Screen";
import { useStore } from "../../store";
import { Buttons } from "./Buttons";
import { useEffect, useRef, useState } from "react";
import { MeshType } from "../../utils/types";

export type GameboyGLTFResult = GLTF & {
  nodes: {
    shell: Mesh;
    screen_border: Mesh;
    screen: Mesh;
    dpad: Mesh;
    a: Mesh;
    b: Mesh;
    select: Mesh;
    start: Mesh;
    menu: Mesh;
  };
  materials: {};
};

export function Gameboy(props: JSX.IntrinsicElements["group"]) {
  const shellRef = useRef<MeshType<MeshBasicMaterial>>(null);
  const bezelRef = useRef<MeshType<MeshBasicMaterial>>(null);
  const defaultColors = useStore((s) => s.colors);
  const uiContext = useStore((s) => s.uiContext);
  const resumeGame = useStore((s) => s.resumeGame);
  const [hovered, setHovered] = useState(false);
  const gm_ao_tex = useTexture(gameboy_ao_map, (t) => {
    if (t instanceof Texture) {
      t.flipY = false;
    }
  });

  useCursor(hovered && uiContext === "paused");

  const { screen_bezel_color, color } = useControls(
    "gameboy",
    {
      color: defaultColors.shell,
      button_color: defaultColors.buttons,
      screen_bezel_color: defaultColors.bezel,
    },
    { collapsed: true },
  );

  useEffect(() => {
    useStore.subscribe(
      (state) => state.colors,
      (colors) => {
        shellRef.current?.material.color.setStyle(colors.shell);
        bezelRef.current?.material.color.setStyle(colors.bezel);
      },
    );
  }, []);

  const { nodes } = useGLTF(model) as GameboyGLTFResult;

  return (
    <group {...props} dispose={null}>
      <group position={[-0.01301, -0.03815, -0.00326]}>
        <a.mesh
          ref={shellRef}
          renderOrder={1}
          geometry={nodes.shell.geometry}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={async () => {
            if (uiContext === "paused") {
              await resumeGame();
            }
          }}
        >
          <meshStandardMaterial
            color={color}
            aoMap={gm_ao_tex}
            // side={DoubleSide}
            transparent={true}
          />
        </a.mesh>
      </group>
      <a.mesh
        ref={bezelRef}
        geometry={nodes.screen_border.geometry}
        position={[-0.01265, 0.02662, -0.17457]}
      >
        <meshStandardMaterial color={screen_bezel_color} aoMap={gm_ao_tex} />
      </a.mesh>

      <Screen position={[-0.01259, 0.02811, -0.23333]} />

      <Buttons nodes={nodes} />
    </group>
  );
}

useGLTF.preload(model);
