/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 ./hero_model.glb -p 5 --types
*/

import {
  Material,
  Mesh,
  BufferGeometry,
  BufferAttribute,
  Points as PointsProps,
  Group,
} from "three";
import { Points, useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useEffect, useMemo, useRef } from "react";
import { gsap, Power1 } from "gsap";
import { useControls } from "leva";
import { useFrame } from "@react-three/fiber";
import { PointsMaterial, PointsMaterialProps } from "./shader/particles";
import { PortalMaterial, PortalMaterialProps } from "./shader/portal";

type GLTFResult = GLTF & {
  nodes: {
    letters: THREE.Mesh;
    air_rock001: THREE.Mesh;
    air_rock002: THREE.Mesh;
    air_rock003: THREE.Mesh;
    air_rock: THREE.Mesh;
    platform: THREE.Mesh;
    emissive: THREE.Mesh;
  };
  materials: {};
};

const COUNT = 100;

export function Platform(props: JSX.IntrinsicElements["group"]) {
  const { nodes } = useGLTF("/hero_model.glb") as GLTFResult;
  const group = useRef<Group>(null);
  const letters = useRef<Mesh<BufferGeometry, Material>>(null);
  const airRock1 = useRef<Mesh<BufferGeometry, Material>>(null);
  const airRock2 = useRef<Mesh<BufferGeometry, Material>>(null);
  const airRock3 = useRef<Mesh<BufferGeometry, Material>>(null);
  const airRock4 = useRef<Mesh<BufferGeometry, Material>>(null);
  const pointsRef = useRef<PointsProps<BufferGeometry, PointsMaterialProps>>(null);
  const emissionRef = useRef<Mesh<BufferGeometry, PortalMaterialProps>>(null);
  const platformRef = useRef<Mesh<BufferGeometry, Material>>(null);

  const bakedTex = useTexture("heroBake.jpg");
  bakedTex.flipY = false;

  const points = useMemo(() => {
    let arr = [];

    for (let i = 0; i < COUNT; i++) {
      let x = Math.random() * 2 - 1;
      let y = Math.random() * 2 - 1;
      let z = Math.random() * 2 - 1;

      arr.push(x, y, z);
    }

    return new Float32Array(arr);
  }, []);

  const aOffset = useMemo(() => {
    let arr = [];

    for (let i = 0; i < COUNT; i++) {
      let offset = Math.random();
      arr[i] = offset;
    }

    return new Float32Array(arr);
  }, []);

  useEffect(() => {
    gsap.to(airRock1.current!.position, {
      duration: 2.8,
      ease: Power1.easeInOut,
      y: 3,
      repeat: -1,
      yoyo: true,
    });

    gsap.to(airRock2.current!.position, {
      duration: 3.2,
      ease: Power1.easeInOut,
      y: 12.5,
      repeat: -1,
      yoyo: true,
    });

    gsap.to(airRock3.current!.position, {
      duration: 2.4,
      ease: Power1.easeInOut,
      y: 9,
      repeat: -1,
      yoyo: true,
    });

    gsap.to(airRock4.current!.position, {
      duration: 3.25,
      ease: Power1.easeInOut,
      y: 4.3,
      repeat: -1,
      yoyo: true,
    });
  }, []);

  useEffect(() => {
    pointsRef.current!.geometry.setAttribute("aOffset", new BufferAttribute(aOffset, 1));
  }, [aOffset]);

  const { portalColor1, portalColor2 } = useControls("Portal", {
    portalColor1: "#c09eff",
    portalColor2: "#ffffff",
  });

  useFrame(({ clock }) => {
    pointsRef.current!.material.uniforms.uTime.value = clock.elapsedTime;

    emissionRef.current!.material.uniforms.uTime.value = clock.elapsedTime;
  });

  return (
    <group {...props} ref={group} dispose={null}>
      <mesh geometry={nodes.letters.geometry} ref={letters} position={[0.05574, 6.93339, -0.00698]}>
        <meshBasicMaterial map={bakedTex} />
      </mesh>
      <mesh
        geometry={nodes.air_rock001.geometry}
        ref={airRock1}
        position={[-3.14247, 1.59546, 3.03652]}
      >
        <meshBasicMaterial map={bakedTex} />
      </mesh>
      <mesh
        geometry={nodes.air_rock002.geometry}
        ref={airRock2}
        position={[-2.40939, 11.24023, -2.64953]}
      >
        <meshBasicMaterial map={bakedTex} />
      </mesh>
      <mesh
        geometry={nodes.air_rock003.geometry}
        ref={airRock3}
        position={[4.34263, 7.24577, -2.62799]}
      >
        <meshBasicMaterial map={bakedTex} />
      </mesh>
      <mesh geometry={nodes.air_rock.geometry} ref={airRock4} position={[3.15335, 3.2013, 2.33815]}>
        <meshBasicMaterial map={bakedTex} />
      </mesh>
      <Points
        ref={pointsRef}
        position={[-0.20013, -0.70351, 0.21569]}
        scale={[1, 1, 1]}
        range={COUNT}
        positions={points}
      >
        <PointsMaterial />
      </Points>

      <mesh
        ref={platformRef}
        geometry={nodes.platform.geometry}
        position={[-0.03233, -1.16806, -1.12225]}
      >
        <meshBasicMaterial map={bakedTex} />
      </mesh>
      <mesh
        ref={emissionRef}
        position={[-0.20013, -0.70351, 0.21569]}
        scale={[1.1, 1, 1.1]}
        rotation={[-Math.PI / 2, 0, 0]}
      >
        <planeGeometry args={[12, 12, 50, 50]} />
        <PortalMaterial uColor1={portalColor1} uColor2={portalColor2} />
      </mesh>
    </group>
  );
}

useGLTF.preload("/hero_model.glb");
