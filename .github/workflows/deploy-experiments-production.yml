name: Vercel Production Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
on:
  push:
    branches:
      - main
jobs:
  Generate-Matrix:
    runs-on: ubuntu-latest
    outputs:
      project-matrix: ${{ steps.set-project-ids.outputs.project-matrix }}
    steps:
      - name: Extract Matrix
        id: set-project-ids
        run: |
          echo "project-matrix=$(echo '${{ vars.PROJECT_IDS }}' | jq -r 'keys' | tr -d ' \n\t\r')" >> "$GITHUB_OUTPUT"

  Deploy-Preview:
    needs: [Generate-Matrix]
    strategy:
      matrix:
        experiment: ${{ fromJson(needs.Generate-Matrix.outputs.project-matrix) }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-${{ matrix.experiment }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.experiment }}-pnpm-store-

      - name: Extract Project ID
        id: set-project-id
        run: |
          echo "PROJECT_ID=$(echo '${{ vars.PROJECT_IDS }}' | jq '."${{ matrix.experiment }}"')" >> $GITHUB_ENV

      - name: Set Project ID as Environment Variable
        run: echo "VERCEL_PROJECT_ID=${{ fromJson(env.PROJECT_ID) }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: pnpm install

      - name: Check For Changes
        id: check-for-changes
        continue-on-error: true
        run: |
          pnpm dlx turbo-ignore ${{ matrix.experiment }} --task=build

      - name: Build and Deploy
        if: ${{steps.check-for-changes.outcome}} == "failure"
        run: |
          pnpm install --global vercel@latest
          vercel pull --environment=production -t ${{ secrets.VERCEL_TOKEN }} -y
          vercel build -A experiments/${{ matrix.experiment }}/vercel.json -t ${{ secrets.VERCEL_TOKEN }} -y --prod
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
